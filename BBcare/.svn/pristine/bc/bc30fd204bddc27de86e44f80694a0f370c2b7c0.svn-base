package user;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;


import db.DBCon;

import java.sql.ResultSet;



// user.UserDao
public class UserDao {
	
	
	/*
	INSERT INTO USERS (userno, UserID, Name, Username, Password, Address, PhoneNumber, PetStatus, SubStatus, SubDate, Role)
	VALUES (seq_sol01.nextval, ?, ?, ?, ?, ?, ?, ?, ?, TO_DATE(?, 'YYYY-MM-DD'), ?);
	 * */
	// 유저 회원가입(회원등록) dao
	public int insertUser(Users ins) {
		int insCnt =0;
		String sql = "INSERT INTO USERS (userno, UserID, Name, Username, Password,Email, Address, PhoneNumber, PetStatus, SubStatus, SubDate, Role)\r\n"
				+ "	VALUES (seq_sol01.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, TO_DATE(?, 'YYYY-MM-DD'), ?)";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, ins.getUserId());
			pstmt.setString(2, ins.getName());
			pstmt.setString(3, ins.getUserName());
			pstmt.setString(4, ins.getPassword());
			pstmt.setString(5, ins.getEmail());
			pstmt.setString(6, ins.getAddress());
			pstmt.setString(7, ins.getPhoneNumber());
			pstmt.setString(8, ins.getPetStatus());
			pstmt.setString(9, ins.getSubStatus());
			  // 'NULL' 문자열이 아니라 직접 null 값을 설정
		    if (ins.getSubDate() != null) {
		        pstmt.setString(10, ins.getSubDate());
		    } else {
		        pstmt.setNull(10, Types.DATE);
		    }
			pstmt.setString(11, ins.getRole());
			insCnt = pstmt.executeUpdate();
			if (insCnt == 0) {
				System.out.println("등록 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("등록 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return insCnt;
	}
	
	// 아이디 중복체크
	public boolean ckUserId(String userId) {
		boolean hasId=false;
		String sql = "SELECT * FROM users WHERE userId=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, userId);
			try (ResultSet rs = pstmt.executeQuery();) {
				hasId = rs.next();
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}		
		return hasId;
	}
	
	// 이메일 중복체크
	public boolean ckEmail(String email) {
		boolean hasEmail=false;
		String sql = "SELECT * FROM users WHERE email=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, email);
			try (ResultSet rs = pstmt.executeQuery();) {
				hasEmail = rs.next();
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}		
		return hasEmail;
	}
	
	// 닉네임 중복체크
	public boolean ckUserName(String userName) {
		boolean hasUserName=false;
		String sql = "SELECT * FROM users WHERE username=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, userName);
			try (ResultSet rs = pstmt.executeQuery();) {
				hasUserName = rs.next();
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}		
		return hasUserName;
	}
	
	// 로그인
	public boolean login(String userId, String password) {
		boolean isLog = false;
		String sql = "SELECT * FROM users WHERE userId=? and password=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, userId);
			pstmt.setString(2, password);
			try (ResultSet rs = pstmt.executeQuery();) {
				// 처리코드2
				// 데이터가 있으면 true, 없으면 false
				isLog = rs.next();
				System.out.println("로그인 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
			System.out.println("로그인 실패");

		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
			System.out.println("로그인 실패");

		}

		return isLog;
	}
	
	// 관리자, 유저 역할 구분
	// SELECT ROLE FROM users WHERE userid='dlathf0202';
	public String getUserRole(String userId) {
	    String userRole = null;
	    String sql = "SELECT ROLE FROM users WHERE userid=?";

	    try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
	        pstmt.setString(1, userId);

	        try (ResultSet rs = pstmt.executeQuery();) {
	            if (rs.next()) {
	                userRole = rs.getString("role");
	            }
	        }
	    } catch (SQLException e) {
	        System.out.println("DB 에러:" + e.getMessage());
	    } catch (Exception e) {
	        System.out.println("일반 에러:" + e.getMessage());
	    }

	    return userRole;
	}
	
	
	// 닉네임 가져오기
		// SELECT ROLE FROM users WHERE userid='dlathf0202';
		public String getUserName(String userId) {
		    String userName = null;
		    String sql = "SELECT userName FROM users WHERE userid=?";

		    try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
		        pstmt.setString(1, userId);

		        try (ResultSet rs = pstmt.executeQuery();) {
		            if (rs.next()) {
		            	userName= rs.getString("userName");
		            }
		        }
		    } catch (SQLException e) {
		        System.out.println("DB 에러:" + e.getMessage());
		    } catch (Exception e) {
		        System.out.println("일반 에러:" + e.getMessage());
		    }

		    return userName;
		}
		
	
	// 유저 정보조회(마이페이지 출력용)
	public Users getUser(String userId) {
		Users user = null;
		String sql = "SELECT userno, userid, name, username, password, email, address, phonenumber, petstatus, substatus, subdate, role FROM users WHERE userId=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, userId);
			try (ResultSet rs = pstmt.executeQuery();) {
				// 처리코드2
				if (rs.next()) {
					user = new Users(
							rs.getInt("userNo"),
							rs.getString("userId"),
							rs.getString("name"),
							rs.getString("userName"),
							rs.getString("password"),
							rs.getString("email"),
							rs.getString("address"),
							rs.getString("phoneNumber"),
							rs.getString("petStatus"),
							rs.getString("subStatus"),
							rs.getString("subDate"),
							rs.getString("role")
							);
				}
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}		
		return user;
	}
	
	// 유저 회원탈퇴(마이페이지 탈퇴용) --> 등록된 강아지도 같이삭제(제약조건으로 설정)
	public int deleteUser(String userId) {
		int delCnt =0;
		String sql = "delete from users where userId = ?";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, userId);
			delCnt = pstmt.executeUpdate();
			if (delCnt == 0) {
				System.out.println("삭제 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("삭제 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return delCnt;		
	}
	
	// 유저 정보수정(마이페이지 수정용)
	// userno, UserID, Name, Username, Password,Email, Address,
	// PhoneNumber, PetStatus, SubStatus, SubDate, Role
	public int updateUser(Users upt) {
		int uptCnt =0;
		String sql = "UPDATE Users\r\n"
				+ "		SET name = ?,\r\n"
				+ "			Username = ?,\r\n"
				+ "			Password = ?,\r\n"
				+ "			Email = ?,\r\n"
				+ "			Address = ?,\r\n"
				+ "			PhoneNumber = ?,\r\n"
				+ "			PetStatus = ?,\r\n"
				+ "			SubStatus = ?,\r\n"
				+ "			SubDate = ?,\r\n"
				+ "			Role = ?\r\n"
				+ "		WHERE UserID=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, upt.getName());
			pstmt.setString(2, upt.getUserName());
			pstmt.setString(3, upt.getPassword());
			pstmt.setString(4, upt.getEmail());
			pstmt.setString(5, upt.getAddress());
			pstmt.setString(6, upt.getPhoneNumber());
			pstmt.setString(7, upt.getPetStatus());
			pstmt.setString(8, upt.getSubStatus());
			pstmt.setString(9, upt.getSubDate());
			pstmt.setString(10, upt.getRole());
			pstmt.setString(11, upt.getUserId());

			uptCnt = pstmt.executeUpdate();
			if (uptCnt == 0) {
				System.out.println("수정 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("수정 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return uptCnt;		
	}
	
	// 멍멍이 등록
	/*
	INSERT INTO Pets (petno, PetName, PetType, Breed, Age, Gender, Neutered, Weight, ImageURL, UserID)
	VALUES (seq_sol02.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	 */
	public int insertPet(Pets ins) {
		int insCnt =0;
		String sql = "INSERT INTO Pets (petno, PetName, PetType, Breed, Age, Gender, Neutered, Weight, ImageURL, UserID)\r\n"
				+ "	VALUES (seq_sol02.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, ins.getPetName());
			pstmt.setString(2, ins.getPetType());
			pstmt.setString(3, ins.getBreed());
			pstmt.setInt(4, ins.getAge());
			pstmt.setString(5, ins.getGender());
			pstmt.setString(6, ins.getNeutered());
			pstmt.setInt(7, ins.getWeight());
			pstmt.setString(8, ins.getImageURL());
			pstmt.setString(9, ins.getUserId());
			
			
			insCnt = pstmt.executeUpdate();
			if (insCnt == 0) {
				System.out.println("등록 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("등록 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		return insCnt;
	}
	
	// 멍멍이 수정
	// petno, PetName, PetType, Breed, Age, Gender, Neutered, Weight, ImageURL, UserID
	public int updatePet(Pets upt) {
		int uptCnt =0;
		String sql = "UPDATE pets\r\n"
				+ "		SET petName = ?,\r\n"
				+ "			petType = ?,\r\n"
				+ "			Breed = ?,\r\n"
				+ "			Age = ?,\r\n"
				+ "			Gender = ?,\r\n"
				+ "			Neutered = ?,\r\n"
				+ "			Weight = ?,\r\n"
				+ "			ImageURL = ?\r\n"
				+ "		WHERE petNo=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, upt.getPetName());
			pstmt.setString(2, upt.getPetType());
			pstmt.setString(3, upt.getBreed());
			pstmt.setInt(4, upt.getAge());
			pstmt.setString(5, upt.getGender());
			pstmt.setString(6, upt.getNeutered());
			pstmt.setInt(7, upt.getWeight());
			  // 'NULL' 문자열이 아니라 직접 null 값을 설정
		    if (upt.getImageURL() != null) {
		        pstmt.setString(8, upt.getImageURL());
		    } else {
		        pstmt.setNull(8, Types.VARCHAR);
		    }
			pstmt.setInt(9, upt.getPetNo());
			uptCnt = pstmt.executeUpdate();
			if (uptCnt == 0) {
				System.out.println("수정 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("수정 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return uptCnt;		
	}
	
	// 멍멍이 삭제
	public int deletePet(int petNo) {
		int delCnt =0;
		String sql = "delete from pets where petNo = ?";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setInt(1, petNo);
			delCnt = pstmt.executeUpdate();
			if (delCnt == 0) {
				System.out.println("삭제 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("삭제 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return delCnt;		
	}
	
	// 멍멍이 정보조회
	// SELECT petno,petname,petType,breed,age,gender,neutered,weight,imageURL FROM pets WHERE userid= ?
	
	public List<Pets> getPetList(String userId) {
		List<Pets> plist = new ArrayList<Pets>();
		String sql = "SELECT petno,petname,petType,breed,age,gender,neutered,weight,imageURL FROM pets WHERE userid= ?";
		// try(객체처리-연결;대화;결과){} : try resource 구문 파일이나 DB연결 자동 자원해제..
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, userId);
			
			try (ResultSet rs = pstmt.executeQuery();) {
				while (rs.next()) {
					plist.add(new Pets
							(rs.getInt("petNo"), 
							rs.getString("petName"), 
							rs.getString("petType"),
							rs.getString("breed"),
							rs.getInt("age"),
							rs.getString("gender"),
							rs.getString("neutered"),
							rs.getInt("weight"),
							rs.getString("imageURL")
							));
				}
				System.out.println("데이터 건수:" + plist.size());
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		return plist;
	}
	
	// 멍멍 번호에 맞춰서 딱 하나만 정보값 가져오기
	public Pets getPet(String petNo) {
		Pets pet = null;
		String sql = "SELECT petname, petType, breed, age, gender, neutered, weight, imageURL, userId FROM pets WHERE petNo=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, petNo);
			try (ResultSet rs = pstmt.executeQuery();) {
				// 처리코드2
				if (rs.next()) {
					pet = new Pets(
							rs.getString("petName"), 
							rs.getString("petType"),
							rs.getString("breed"),
							rs.getInt("age"),
							rs.getString("gender"),
							rs.getString("neutered"),
							rs.getInt("weight"),
							rs.getString("imageURL"),
							rs.getString("userId")
							);
				}
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}		
		return pet;
	}
	
	// 구독 테이블 정보넣기
	public int inserSub(String subDate, String subDate02, String userId) {
		int insCnt =0;
		String sql = "INSERT INTO Subscribe (subNo, subPrice, subDate, subExpiryDate, subMonths, userId)\r\n"
				+ "	VALUES (seq_sol03.nextval, 3300,  TO_DATE(?, 'YYYY-MM-DD'),TO_DATE(?, 'YYYY-MM-DD') + INTERVAL '1' MONTH, 1, ?)";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, subDate);
			pstmt.setString(2, subDate02);
			pstmt.setString(3, userId);
			
			insCnt = pstmt.executeUpdate();
			if (insCnt == 0) {
				System.out.println("등록 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("등록 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return insCnt;
	}
	
	// 구독 테이블 정보 변경(만료날짜, 결제날짜, 지속기간)
	public int updateSub(String subDate, String subDate02, String userId) {
	    int uptCnt = 0;
	    String sql = "UPDATE subscribe "
	            + "SET subDate = ?, "
	            + "    subExpiryDate = TO_DATE(?, 'YYYY-MM-DD') + INTERVAL '1' MONTH, "
	            + "    subMonths = subMonths + 1 "
	            + "WHERE userId = ?";
	    try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql)) {
	        con.setAutoCommit(false);
	        // 처리코드1
	        pstmt.setString(1, subDate);
	        pstmt.setString(2, subDate02);
	        pstmt.setString(3, userId);

	        uptCnt = pstmt.executeUpdate();
	        if (uptCnt == 0) {
	            System.out.println("수정 실패");
	            con.rollback();
	        } else {
	            con.commit(); // Commit the transaction
	            System.out.println("수정 성공");
	        }
	    } catch (SQLException e) {
	        System.out.println("DB 에러:" + e.getMessage());
	    } catch (Exception e) {
	        System.out.println("일반 에러:" + e.getMessage());
	    }

	    return uptCnt;
	}
	
	// user테이블 구독상태변경
	public int updateUserSub(String userId) {
		int uptCnt =0;
		String sql = "UPDATE Users \r\n"
				+ "		SET substatus= 'Y'"
				+ "		WHERE userId=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			pstmt.setString(1, userId);
		
			uptCnt = pstmt.executeUpdate();
			if (uptCnt == 0) {
				System.out.println("수정 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("수정 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return uptCnt;		
	}
	
	
	// 구독 테이블 정보 출력
	public Subscribe getSub(String userId) {
		Subscribe sub = null;
		String sql = "SELECT * FROM subscribe WHERE userId=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			// 처리코드1
			pstmt.setString(1, userId);
			try (ResultSet rs = pstmt.executeQuery();) {
				// 처리코드2
				if (rs.next()) {
					sub = new Subscribe(
							rs.getInt("subNo"), 
							rs.getInt("subPrice"),
							rs.getString("subDate"),
							rs.getString("subExpiryDate"),
							rs.getInt("subMonths"),
							rs.getString("userId")
							);
				}
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}		
		return sub;
	}
	
	// 구독해지(만료일이 지난경우)
	//DELETE FROM Subscribe WHERE userId = ? AND subExpiryDate < TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS');
	public int deleteSub(String userId) {
		int delCnt =0;
		String sql = "DELETE FROM Subscribe WHERE userId = ? AND subExpiryDate < TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, userId);
			delCnt = pstmt.executeUpdate();
			if (delCnt == 0) {
				System.out.println("삭제 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("삭제 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return delCnt;		
	}
	
	// 만료일 지나면, 유저 구독정보 N으로 바뀌는거
	public int updateUserSubN(String userId) {
		int uptCnt =0;
		String sql = "UPDATE Users \r\n"
				+ "		SET substatus= 'N'"
				+ "		WHERE userId=? ";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			pstmt.setString(1, userId);
		
			uptCnt = pstmt.executeUpdate();
			if (uptCnt == 0) {
				System.out.println("수정 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("수정 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return uptCnt;		
	}
	
	// 구독해지 버튼 클릭하면 얄짤없이 ㅂㅂ
	public int deleteSubNow(String userId) {
		int delCnt =0;
		String sql = "delete from Subscribe where userId = ?";
		try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
			con.setAutoCommit(false);
			// 처리코드1
			pstmt.setString(1, userId);
			delCnt = pstmt.executeUpdate();
			if (delCnt == 0) {
				System.out.println("삭제 실패");
				con.rollback();
			} else {
				con.commit(); // Commit the transaction
				System.out.println("삭제 성공");
			}
		} catch (SQLException e) {
			System.out.println("DB 에러:" + e.getMessage());
		} catch (Exception e) {
			System.out.println("일반 에러:" + e.getMessage());
		}
		
		return delCnt;		
	}
		
	
	// 이메일 인증 여부
		public Users getUserEmail(String email) {
			Users user = null;
			String sql = "SELECT userno, userid, name, username, password, email, address, phonenumber, petstatus, substatus, subdate, role FROM users WHERE email=? ";
			try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
				// 처리코드1
				pstmt.setString(1, email);
				try (ResultSet rs = pstmt.executeQuery();) {
					// 처리코드2
					if (rs.next()) {
						user = new Users(
								rs.getInt("userNo"),
								rs.getString("userId"),
								rs.getString("name"),
								rs.getString("userName"),
								rs.getString("password"),
								rs.getString("email"),
								rs.getString("address"),
								rs.getString("phoneNumber"),
								rs.getString("petStatus"),
								rs.getString("subStatus"),
								rs.getString("subDate"),
								rs.getString("role")
								);
					}
				}
			} catch (SQLException e) {
				System.out.println("DB 에러:" + e.getMessage());
			} catch (Exception e) {
				System.out.println("일반 에러:" + e.getMessage());
			}		
			return user;
		}
		
	// 이메일로 아이디 찾기
		public boolean FindId(String email) {
			boolean hasEmail=false;
			String sql = "SELECT * FROM users WHERE email=? ";
			try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
				// 처리코드1
				pstmt.setString(1, email);
				try (ResultSet rs = pstmt.executeQuery();) {
					hasEmail = rs.next();
				}
			} catch (SQLException e) {
				System.out.println("DB 에러:" + e.getMessage());
			} catch (Exception e) {
				System.out.println("일반 에러:" + e.getMessage());
			}		
			return hasEmail;
		}
		
		// 이메일,아이디로 비번 찾기
				public boolean FindPwd(String userId,String email) {
					boolean whatPwd=false;
					String sql = "SELECT * FROM users WHERE userId=? and email=? ";
					try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
						// 처리코드1
						pstmt.setString(1, userId);
						pstmt.setString(2, email);
						try (ResultSet rs = pstmt.executeQuery();) {
							whatPwd= rs.next();
						}
					} catch (SQLException e) {
						System.out.println("DB 에러:" + e.getMessage());
					} catch (Exception e) {
						System.out.println("일반 에러:" + e.getMessage());
					}		
					return whatPwd;
				}
	
				// 비밀번호 재설정
				public int updatePwd(String password,String userId) {
					int uptCnt =0;
					String sql = "UPDATE Users \r\n"
							+ "		SET password= ?"
							+ "		WHERE userId=? ";
					try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
						con.setAutoCommit(false);
						pstmt.setString(1, password);
						pstmt.setString(2, userId);
					
						uptCnt = pstmt.executeUpdate();
						if (uptCnt == 0) {
							System.out.println("수정 실패");
							con.rollback();
						} else {
							con.commit(); // Commit the transaction
							System.out.println("수정 성공");
						}
					} catch (SQLException e) {
						System.out.println("DB 에러:" + e.getMessage());
					} catch (Exception e) {
						System.out.println("일반 에러:" + e.getMessage());
					}
					
					return uptCnt;		
				}
		
		public String checkSub(String userId) {
			String sql = "SELECT substatus\r\n"
					+ "FROM users\r\n"
					+ "WHERE userId = ?";
			String sub = null;

		    try (Connection con = DBCon.con(); PreparedStatement pstmt = con.prepareStatement(sql);) {
		        pstmt.setString(1, userId);

		        try (ResultSet rs = pstmt.executeQuery();) {
		            if (rs.next()) {
		            	sub = rs.getString("substatus");
		            }
		        }
		    } catch (SQLException e) {
		        System.out.println("DB 에러:" + e.getMessage());
		    } catch (Exception e) {
		        System.out.println("일반 에러:" + e.getMessage());
		    }
			
			return sub;
		}
				
				
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		


//        // UserDao 인스턴스 생성
        UserDao dao = new UserDao();
        
        boolean isresult = dao.FindPwd("dlathf0202","dlathf0202@naver.com");
       System.out.println(isresult);
       
        


}}
