### 1. 흥미로운 도입
상상해 보세요. 당신은 레스토랑에 있습니다. 음식을 주문했지만, 웨이터가 실수로 잘못된 
요리를 가져왔다고 합시다. 이 상황에서 웨이터는 실수를 바로잡고, 올바른 음식을 제공해야 
합니다. 이처럼 웹 개발에서도, 예외 상황을 적절하게 처리하는 것은 사용자 경험을 향상시키는
 중요한 요소입니다. JSP에서 예외 처리는 이와 같은 상황에 대응하는 방법을 제공합니다.
### 2. 학습목표
- 예외와 예외 처리의 기본 개념 이해
- JSP에서 예외 처리 방법 학습
- 사용자 친화적인 오류 페이지 생성 방법 이해
### 3. 주요 핵심 키워드와 개념
- **예외 (Exception)**: 프로그램 실행 중 발생하는 예외적인 상황
- **예외 처리 (Exception Handling)**: 프로그램의 비정상적인 종료를 막고, 
     정상적인 실행 상태를 유지하기 위한 프로세스
- **try-catch 블록**: 예외가 발생할 수 있는 코드를 감싸고, 예외 발생 시 이를 잡아내는 구문
- **errorPage와 isErrorPage**: JSP에서 예외 페이지를 지정하고 처리하는 지시어
- **Throwable 객체**: 예외 상황에 대한 정보를 담고 있는 객체
### 4. 생각하고 토론해볼 내용
- 예외 처리를 할 때 사용자에게 어떤 정보를 제공해야 할까요?
- 모든 예외를 일괄적으로 처리하는 것이 좋은 방법인가요, 아니면 예외 유형에 따라 다르게 처리하는 것이 좋은가요?
- 개발 중 예외 처리를 어떻게 통합하여 더 나은 코드 품질을 달성할 수 있을까요?
### 5. 간단한 퀴즈
1. JSP에서 예외 페이지를 지정하기 위해 사용되는 페이지 지시어는 무엇인가요?
2. 예외 객체를 참조하는 JSP 내장 객체의 이름은 무엇인가요?
3. `try-catch` 블록 없이 예외를 처리하는 JSP의 기능은 무엇인가요?

### 6. 실무적용 예시
- **사용자 친화적인 오류 페이지 생성**: 웹 애플리케이션에서 발생 가능한 예외들에 대해
      사용자에게 친숙하고 명확한 메시지를 전달하는 커스텀 오류 페이지를 생성합니다.
- **로그 기록**: 서버 측에서 예외가 발생했을 때, 이를 로그 파일에 기록하여 개발자가 
     문제를 추적하고 해결할 수 있도록 합니다.
- **다양한 예외 유형 처리**: 데이터베이스 연결 오류, 파일 업로드 문제 등 다양한 예외
     유형에 대해 특정 로직을 구현하여 각각의 상황에 맞는 적절한 대응을 합니다.