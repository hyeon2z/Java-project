package javaexp.z02_homework.a03_ls;

import java.util.Scanner;

public class A0927 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		/*
		# 연휴과제
		# 미니프로젝트 1개와 아래 일자별 과제 진행
		# 일자별 진행할 내용
		# javascript와 java로 처리하고 차이점에 대하여 기술하세요.
		
		
		### 09/28 (목요일)
		- **개념문제**: 자바의 메모리 분류 및 기본 데이터 유형에 대한 설명.
		- **코드연습문제**: 다양한 기본 데이터 유형을 가진 변수를 선언하고 값을 할당하는 코드 작성.
		1. 실수 유형의 10.5 값을 `정수` 유형으로 형변환하여 출력하세요.
		2. 변수명으로 적절하지 않은 것들을 선언해보고, 왜 그것이 적절하지 않은지 설명하세요.
		---
		
		### 09/29 (금요일)
		- **개념문제**: 데이터 유형의 형변환 및 변수 선언 규칙에 대한 이해.
		- **코드연습문제**: 형변환을 요구하는 다양한 상황의 코드 작성 및 변수 선언 규칙을 따르는 코드 작성.
		사용자로부터 두 개의 정수 `a`와 `b`를 입력받아, 그 중 어느 수가 큰지 판별하고, 두 수의 합, 차, 곱, 나눗셈의 몫과 나머지를 출력하세요.
		---
		### 09/30 (토요일)
		- **개념문제**: 자바의 연산자들에 대한 설명 및 각 연산자의 용도 이해.
		- **코드연습문제**: 주어진 문제 상황에 맞는 연산자를 사용하여 코드를 작성.
		사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
		---
		### 10/01 (일요일)
		- **개념문제**: 조건문의 개념 및 각 구문의 사용 방법에 대한 이해.
		- **코드연습문제**: 주어진 문제 상황에 맞는 if-else 문 또는 switch-case 문을 사용하여 코드를 작성.
		사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
		---

		### 10/02 (월요일)
		- **개념문제**: 반복문의 개념 및 각 구문의 사용 방법에 대한 이해.
		- **코드연습문제**: 주어진 문제 상황에 맞는 for, while, do-while 문을 사용하여 코드를 작성.
		1부터 사용자가 입력한 수까지의 모든 정수의 합을 구하세요.
		---
		### 10/03 (화요일)
		- **개념문제**: 자바의 데이터 처리 방식 및 객체의 개념 이해.
		- **코드연습문제**: 배열과 객체를 활용하는 코드 작성 및 클래스의 구성요소에 따라 메서드와 필드를 가진 클래스 설계.
		사각형 클래스를 만들고, 넓이와 둘레를 구하는 메서드를 포함시키세요. 객체를 생성하고 해당 메서드를 호출하여 결과를 출력하세요.

		# 조별로 파악사항(아래사항 조별로 취합 전달 17:20까지 전달)
		1. 오늘 가장 어려웠던 부분 best3 및 내일 자세한 설명 필요한 부분
		2. 개인별/조별 미니프로젝트 주제 및 내용 전달
		3. 오늘 지각(9:00기준)인원과 사유

		 * */
//		====================================================================================================
//		### 09/28 (목요일)
//		- **개념문제**: 자바의 메모리 분류 및 기본 데이터 유형에 대한 설명.
//		- **코드연습문제**: 다양한 기본 데이터 유형을 가진 변수를 선언하고 값을 할당하는 코드 작성.
//		1. 실수 유형의 10.5 값을 `정수` 유형으로 형변환하여 출력하세요.
//		2. 변수명으로 적절하지 않은 것들을 선언해보고, 왜 그것이 적절하지 않은지 설명하세요.
		
//		기본적인 자바의 데이터 유형은 실수형 (double, float) 정수형(int,byte, long) 문자열(char,String)
//		이 있으며 이 형태로 선언되고 할당된 정보들은 stack영역에 저장됩니다.
//		하지만 객체로 선언하고 정보를 할당하게 되면 정보는 heap영역에 저장되고 stack영역에 주소값을 배정하여 정보를 가져오게 됩니다.
		
//		int i01 = (int)10.5; System.out.println(i01); // 10으로 실수값만 프린트
//		double i02 = (Math.floor(10.5)); System.out.println(i02);  // 10.0 (반내림)
//		int i022= (int)i02; System.out.println(i022);  // 10
//		double i03 = (Math.round(10.5)); System.out.println(i03); // 11.0 (반올림)
//		int i032= (int)i03; System.out.println(i032); // 11
		
//		2. 변수명으로 적절하지 않은 것들을 선언해보고, 왜 그것이 적절하지 않은지 설명하세요.
		
//		String a = 10;  --> 왜 적절치 않냐고 물으신다면 컴퓨터가 정보값을 받아들이는데 정해진 타입에 맞춰넣어야 한다.
		// 근데 다른 타입으로 넣어버리면 컴퓨터가 인식한 정보 데이터 유형과 실제로 넣어진 정보의 데이터 유형이 다르기때문에 오류가 발생한다.
		
//		============================================================================================
//		### 09/29 (금요일)
//		- **개념문제**: 데이터 유형의 형변환 및 변수 선언 규칙에 대한 이해.
//		- **코드연습문제**: 형변환을 요구하는 다양한 상황의 코드 작성 및 변수 선언 규칙을 따르는 코드 작성.
//		사용자로부터 두 개의 정수 `a`와 `b`를 입력받아, 그 중 어느 수가 큰지 판별하고, 두 수의 합, 차, 곱, 나눗셈의 몫과 나머지를 출력하세요.
		
//		-** 개념문제 : 선언된 데이터 타입과, 실제로 할당해야 하는 데이터 유형이 다른경우가 발생하는데 이런경우 형변환을 이용해서 정보를 할당하여야한다.
//		기본적으로 더 많은 정보를 담을 수 있는 변환(int->double / char -> String / byte->int->long / double->float)는 
//		자동적으로 형변환이 되지만, 반대로 가는 경우에는 할당된 정보값앖에 변환할 데이터 타입 을 가로 안에 넣고 할당하는 캐스팅을 해줘야 가능하며
//		문자열에서 숫자형으로 바꿀때는 Integer.parseInt() , Double.parseDouble() 을 이용해서 형변환을 할 수 있다.
		
//		-** 코드연습문제 : 
		Scanner sc = new Scanner(System.in);
//		System.out.println("첫번째 숫자를 입력하세요"); int a = Integer.parseInt(sc.nextLine());
//		System.out.println("두번째 숫자를 입력하세요"); int b = Integer.parseInt(sc.nextLine());
//		
//		if(a>b) {
//			System.out.println("첫번째 숫자가 더 큽니다");
//			System.out.println("두 수의 합 : "+ (a+b));
//			System.out.println("두 수의 차 : "+ (a-b));
//			System.out.println("두 수의 곱 : "+ (a*b));
//			System.out.println("두 수의 나눗셈의 몫: "+(double)(a/b));
//			System.out.println("두 수의 나눗셈의 나머지: "+(double)(a%b));
//		} else if(a==b) {
//			System.out.println("한 숫자를 더 크게 입력해주세요");
//			System.out.println("첫번째 숫자를 입력하세요"); a = Integer.parseInt(sc.nextLine());
//			System.out.println("두번째 숫자를 입력하세요"); b = Integer.parseInt(sc.nextLine());
//		} else {
//			System.out.println("두번째 숫자가 더 큽니다");
//			System.out.println("두 수의 합 : "+ (b+a));
//			System.out.println("두 수의 차 : "+ (b-a));
//			System.out.println("두 수의 곱 : "+ (a*b));
//			System.out.println("두 수의 나눗셈의 몫: "+(double)(b/a));
//			System.out.println("두 수의 나눗셈의 나머지: "+(double)(b%a));
//		}
//		===============================================================================================
		
//		### 09/30 (토요일)
//		- **개념문제**: 자바의 연산자들에 대한 설명 및 각 연산자의 용도 이해.
		 
//		자바에는 기본적으로 연산자는 증감연산자(++,--) , 누적연산자 (+=,-=,,,)
//		비교 연산자(>=,<=...) , 논리연산자(&&,||...), 부정연산자(!) ,
//		삼항연산자 (조건 ? 조건이 참일때 실행할 결과 : 거짓일때 실행할 결과) 가있습니다.
		
		
//		- **코드연습문제**: 주어진 문제 상황에 맞는 연산자를 사용하여 코드를 작성.
//		사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요
//		System.out.println("숫자를 입력해주세요");
//		int i = Integer.parseInt(sc.nextLine());
//		if (i>0) {
//			System.out.println("입력하신 숫자는 양수입니다");
//		} else if(i<0) {
//			System.out.println("입력하신 숫자는 음수입니다.");
//		} else {
//			System.out.println("입력하신 숫자는 0입니다.");
//		}
//		System.out.println("==================================================================");
//		
		
//		### 10/01 (일요일)
//		- **개념문제**: 조건문의 개념 및 각 구문의 사용 방법에 대한 이해.
		
//		조건문은 크게 if(else if), switch 구문을 주로 사용하고, 중복해서도 사용이 가능합니다. 
//		이러한 조건문을 사용하게 되면 원하는 조건에 원하는 결과를 도출할 수 있게됩니다.
//		if 구문의 기본 형식은 if(조건) {조건이 참일경우 원하는 결과}else {조건이 거짓일 경우 결과} 
//		/ if(조건1) {조건1이 참일경우 실행결과} else if(조건1을 제외한 다른조건) {그 다른조건이 참일경우 실행할 결과} else {둘다 거짓일경우 실행}
//		switch 같은 경우는 switch(조건) {case 와 default로 원하는 결과 할당} 의 구조를 가지고 있습니다.
		
		
//		- **코드연습문제**: 주어진 문제 상황에 맞는 if-else 문 또는 switch-case 문을 사용하여 코드를 작성.
//		사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
		
//		System.out.println("숫자를 입력해주세요");
//		int i = Integer.parseInt(sc.nextLine());
//		if (i>0) {
//			System.out.println("입력하신 숫자는 양수입니다");
//		} else if(i<0) {
//			System.out.println("입력하신 숫자는 음수입니다.");
//		} else {
//			System.out.println("입력하신 숫자는 0입니다.");
//		}
//		System.out.println("==================================================================");

		
//		### 10/02 (월요일)
//		- **개념문제**: 반복문의 개념 및 각 구문의 사용 방법에 대한 이해.
//		
//		a) 반복문이란 변수를 설정해 설정한 변수가 사용자가 원하는 턴만큼 반복하여 {} 안에 있는 코드들을 반복적으로 수행하는 것으로, 
//			무한루프도 가능합니다. for 과 while 를 기본으로 중복도 가능하고 위의 조건문과 같이 쓰는 경우도 빈번합니다. 
		
		
//		- **코드연습문제**: 주어진 문제 상황에 맞는 for, while, do-while 문을 사용하여 코드를 작성.
//		1부터 사용자가 입력한 수까지의 모든 정수의 합을 구하세요.
//		---
		
//		System.out.println("1부터 누적합계를 처리하기 위한 원하는 숫자를 입력하십시오.");
//		int user = Integer.parseInt(sc.nextLine());
//		int sum = 0 ;
//		for (int i=1; i<=user; i++) {
//			sum+=i;
//		}
//		System.out.println("1부터 원하는 수 까지의 정수 합계  : " + sum);
//		System.out.println("==================================================================");
		
		
//		---
//		### 10/03 (화요일)
//		- **개념문제**: 자바의 데이터 처리 방식 및 객체의 개념 이해.
//			a) 자바는 기본적으로 stack 영역을 이용하여 간단한 정보들을 저장합니다. 하지만 객체라는 방대한 정보를 넣을수 있는
//				객체를 선언하게 되면, 실질적으로 저장되는 곳은 heap영역이지만 stack영역에 주소값을 저장하여 
//				그 주소값을 통해 정보를 호출하고 사용하게 됩니다. 
//				매번 하나의 정보를 저장하기 위해 매번 변수타입과 변수명을 설정하다가 객체를 선언하게 되면 더욱 쉽고 편리하게
//				많은 양의 정보를 입력할 수 있게 됩니다.
			
//		- **코드연습문제**: 배열과 객체를 활용하는 코드 작성 및 클래스의 구성요소에 따라 메서드와 필드를 가진 클래스 설계.
//		사각형 클래스를 만들고, 넓이와 둘레를 구하는 메서드를 포함시키세요. 객체를 생성하고 해당 메서드를 호출하여 결과를 출력하세요.
//		Rac r01 = new Rac(10,6);
//		r01.show();
//		System.out.println("사각형의 넓이  : "+r01.xy());
//		
//		r01.setX(12);  //  바뀐 가로길이
//		r01.setY(8);   //  바뀐 세로길이
//		r01.show();
//		System.out.println("사각형의 넓이  : "+r01.xy());
	}

}
