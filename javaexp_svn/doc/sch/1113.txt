### 1. 흥미로운 도입
상상해보세요, 당신이 대형 도서관의 관리자입니다. 이 도서관에는 수많은 책이 있고, 
매일 새로운 책이 들어오고, 오래된 책은 정리되어야 합니다. 여기서 
자바의 DAO(Data Access Object)는 그 도서관의 '자동화된 관리 시스템'과 같습니다. 
이 시스템을 통해 책들(데이터)을 효율적으로 추가, 수정, 삭제하고, 원하는 책을 쉽게 
찾을 수 있습니다. 이번 강의에서는 이러한 DAO의 역할을 자세히 배우고, 
실제로 ResultSet을 활용하여 데이터베이스와 상호작용하는 방법을 알아보겠습니다.
### 2. 학습목표
- 자바에서 DAO의 역할과 중요성을 이해합니다.
- ResultSet을 사용하여 데이터베이스로부터 데이터를 읽는 방법을 배웁니다.
- 데이터를 데이터베이스에 등록, 수정, 삭제하는 방법을 학습합니다.
- 예외 처리와 데이터베이스 연결 관리에 대해 배웁니다.
### 3. 주요 핵심 키워드와 개념
- **ResultSet**: SQL 쿼리의 결과를 나타내는 자바 객체.
- **SQL Injection**: 보안 취약점 중 하나로, 잘못된 SQL 쿼리를 통해 
	데이터베이스가 공격받을 수 있음.
### 4. 생각하고 토론해볼 내용
- PreparedStatement와 Statement의 차이점과 각각의 사용 시나리오는 무엇일까요?
- SQL Injection을 방지하기 위한 코딩 관행에는 어떤 것들이 있을까요?
### 5. 간단한 퀴즈
1) DAO 패턴에서 CRUD는 각각 무엇의 약자인가요?
2) ResultSet 객체를 사용할 때, 어떤 메소드를 통해 데이터를 읽을 수 있나요?
3) JDBC에서 데이터베이스 연결을 닫는 메소드는 무엇인가요?

### 6. 실무적용 예시
- **사용자 정보 관리 시스템**: 사용자 정보를 데이터베이스에 저장, 업데이트, 조회, 
	삭제하는 기능을 구현. ResultSet을 사용하여 사용자 데이터를 읽고, 
	PreparedStatement를 사용하여 SQL 쿼리를 안전하게 실행.
- **재고 관리 시스템**: 제품 재고 데이터를 관리하는 DAO를 구현. 새로운 제품 등록, 
	재고 수정, 제품 삭제 기능을 포함하며, 트랜잭션 관리를 통해 데이터 일관성 유지.
- **온라인 도서 대여 서비스**: 도서 정보를 관리하고 사용자가 도서를 대여할 수 있는
	 기능 구현. DAO를 통해 도서 데이터를 관리하고, 사용자의 대여 기록을 데이터베이스에
	  기록.

### 주관식 문제

1. **DAO의 주요 역할은 무엇입니까?**
   
2. **ResultSet 객체를 사용하는 목적은 무엇인가요?**

3. **CRUD의 각 글자가 나타내는 데이터베이스 작업은 무엇인가요?**

4. **JDBC가 자바 프로그래밍에 어떤 기능을 제공합니까?**

5. **SQL Injection이란 무엇이며, 왜 위험한가요?**

6. **PreparedStatement와 Statement의 주요 차이점은 무엇인가요?**

7. **트랜잭션 관리가 중요한 이유는 무엇인가요?**

8. **ResultSet에서 데이터를 읽기 위해 사용되는 주요 메소드는 무엇인가요?**

9. **데이터베이스 연결을 안전하게 종료하기 위한 JDBC의 권장 사항은 무엇인가요?**

10. **DAO 패턴의 장점 중 하나를 설명해주세요.**

### 객관식 문제

1. **DAO의 기본 기능은 무엇인가요?**
   - a) 데이터 암호화
   - b) 네트워크 관리
   - c) 데이터베이스 접근 및 관리
   - d) 사용자 인터페이스 제공

2. **ResultSet 객체는 어떤 목적으로 사용됩니까?**
   - a) 데이터베이스 연결
   - b) SQL 쿼리 실행
   - c) 쿼리 결과 집합 처리
   - d) 트랜잭션 관리

3. **CRUD에서 'U'는 무엇을 의미합니까?**
   - a) 사용 (Use)
   - b) 언도 (Undo)
   - c) 업그레이드 (Upgrade)
   - d) 업데이트 (Update)

4. **JDBC는 무엇의 약자입니까?**
   - a) Java Data Base Connectivity
   - b) Java Development Basic Code
   - c) Java Dynamic Binary Compilation
   - d) Java Database Connection

5. **SQL Injection 방지를 위한 가장 좋은 방법은 무엇입니까?**
   - a) 정적 SQL 사용
   - b) PreparedStatement 사용
   - c) SQL 쿼리 문자열에 사용자 입력 직접 추가
   - d) 모든 데이터베이스 연결을 암호화

6. **PreparedStatement의 목적은 무엇입니까?**
   - a) SQL 쿼리 최적화
   - b) 데이터베이스 보안 강화
   - c) 데이터베이스 연결 가속화
   - d) 사용자 인터페이스 향상

7. **트랜잭션 관리의 중요성은 무엇인가요?**
   - a) 데이터베이스 성능 향상
   - b) 데이터 일관성 및 무결성 유지
   - c) 사용자 인터페이스 개선
   - d) 네트워크 트래픽 감소

8. **ResultSet 객체를 통해 데이터를 읽는 메소드는 무엇입니까?**
   - a) `read()`
   - b) `getData()`
   - c) `executeQuery()`
   - d) `next()`

9. **데이터베이스 연결을 종료할 때 고려해야 할 사항은 무엇입니까?**
   - a) 항상 데이터베이스에 쿼리를 남겨둡니다.
   - b) 연결을 열어둔 채로 프로그램을 종료합니다.
   - c) 연결을 닫기 전에 모든 트랜잭션을 커밋하거나 롤백합니다.
   - d) 연결 종료는 필요하지 않습니다.

10. **DAO 패턴의 한 가지 장점은 무엇입니까?**
    - a) 데이터 암호화 자동화
    - b) 소스 코드 최적화
    - c) 비즈니스 로직과 데이터 액세스 로직 분리
    - d) 사용자 인터페이스 개선
