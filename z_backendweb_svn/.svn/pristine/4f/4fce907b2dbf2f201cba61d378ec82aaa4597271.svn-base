### 1. 흥미로운 도입
상상해보세요, 건물을 짓는다고 할 때 모든 부분을 한 사람이 짓지 않습니다. 전문가들이 각기 
다른 부분을 담당하죠 - 전기, 배관, 벽돌 쌓기 등. 웹 개발도 마찬가지입니다. 큰 웹 
어플리케이션을 만들 때, 모든 코드를 하나의 페이지에 넣지 않습니다. JSP 페이지 모듈화와 
요청 흐름 제어를 통해, 각 부분을 전문가처럼 분리하고 관리합니다. 
이렇게 하면 유지보수가 쉽고, 효율적인 웹 애플리케이션을 구축할 수 있습니다.
### 2. 학습목표
- JSP 페이지 모듈화의 중요성과 기본 개념을 이해합니다.
- 요청 흐름 제어 방법을 배웁니다.
- JSP와 서블릿 간의 상호작용을 파악합니다.
- 실제 웹 어플리케이션에서 모듈화와 요청 흐름 제어를 적용하는 방법을 학습합니다.
### 3. 주요 핵심 키워드와 개념
- **모듈화 (Modularization)**: 코드를 독립적이고 재사용 가능한 단위로 분리하는 과정.
- **JSP (Java Server Pages)**: 자바 코드를 HTML 내에 삽입하여 동적인 웹 페이지
	를 생성하는 기술.
- **서블릿 (Servlet)**: 서버에서 실행되며 클라이언트의 요청을 처리하고 응답을 
	생성하는 자바 프로그램.
- **MVC 패턴 (Model-View-Controller)**: 어플리케이션을 모델, 뷰, 컨트롤러로 
	분리하는 디자인 패턴.
- **포워딩 (Forwarding)**: 한 웹 컴포넌트에서 다른 웹 컴포넌트로 요청을 전달하는 
	과정.
### 4. 생각하고 토론해볼 내용
- JSP 페이지 모듈화가 웹 어플리케이션 개발에 어떤 이점을 제공할까요?
- MVC 패턴은 왜 JSP/서블릿 어플리케이션에서 널리 사용될까요?
- 요청 흐름 제어가 복잡한 어플리케이션의 성능에 어떤 영향을 미칠 수 있을까요?
### 5. 간단한 퀴즈
1) JSP 페이지 모듈화에서 재사용할 수 있는 컴포넌트는 무엇인가요?
2) MVC 패턴에서 'C'는 무엇을 의미하나요?
3) 서블릿에서 클라이언트의 요청을 다른 JSP 페이지로 전달하는 메서드는 무엇인가요?
### 6. 실무적용 예시
- **뉴스 웹사이트**: 다양한 카테고리의 뉴스를 보여주는 웹사이트. 각 카테고리별 뉴스 
	페이지는 모듈화되어 재사용되며, 사용자의 요청에 따라 적절한 페이지로 포워딩합니다.
- **온라인 쇼핑몰**: 제품 목록, 상세 정보, 장바구니 등 각 기능을 별도의 모듈로 구현.
	 사용자의 액션에 따라 서블릿이 적절한 JSP 페이지로 요청을 넘깁니다.