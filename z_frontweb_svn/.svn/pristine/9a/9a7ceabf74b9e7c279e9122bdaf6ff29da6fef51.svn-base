<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script>
//### 09/28 (목요일)
//- **개념문제**: 자바스크립트의 메모리 분류 및 기본 데이터 유형에 대한 설명.
    /*
    1. 자바스크립트의 메모리 분류 (자바처럼 스택과 힙 영역으로 구분됨.)
        1) Call Stack 영역 
            - 원시 타입(숫자 등) 데이터가 저장된다.
            - 실행 컨텍스트를 통해 변수 식별자(이름) 저장, 스코프 체인 및 this 관리,
              코드 실행 순서 관리 등을 수행한다.
        2) Memory Heap 영역
            - 참조 타입(객체 등) 데이터가 저장된다.
            - 메모리 할당이 일어나는 곳.

    2. 자바스크립트의 기본 데이터 유형
        1) 기본 타입(Primitive Type)
            - 숫자형(Number)    ex) var num = 9
            - 문자열 (String)   ex) var str = 'dev' 
                                    str[0] = 'D' ==> 첫 번째 문자열을 대문자로 변경하여도 변경되지 않음.
                                                    (한번 정의한 문자열은 변하지 않는다.)
            - 논리값(boolean)   ex) var isTrue = true
            - undefined : null과 같이 값이 비어있음을 나타내지만, 그 비어있는 값을 출력하면 
                        undefined로 나타난다는 점에서 차이가 있음.
            - null : 명시적으로 값이 비어있음을 나타내고, 이를 출력해보면 null이 아닌 object가 출력됨.
            - symbol : es6 부터 등장한 새로운 데이터 타입. 고유한 프로퍼티를 만들기 위한 데이터 타입이다.
        2) 참조 타입(Reference Type)
            - 객체(Object) : 기본타입을 제외한 모든 값은 객체로 취급된다.
                            하나의 값만 저장되는 기본 데이터 타입과 달리 여러개의 프로퍼티를 저장할 수 있다.
                            ex) var obj = {
                                    name: '홍길동'
                                    age : 30
                                    passed : true
                                    getInfo : function(){
                                        return this.name + ',' + this.age;
                                    }
                                }
                                console.log(obj.name, obj.age, obj.passed);
                                console.log(obj.getInfo());
    */
//- **코드연습문제**: 다양한 기본 데이터 유형을 가진 변수를 선언하고 값을 할당하는 코드 작성.	
//	1. 실수 유형의 10.5 값을 `정수` 유형으로 형변환하여 출력하세요.
    var num01 = Math.floor(10.5)
    console.log(num01)
//	2. 변수명으로 적절하지 않은 것들을 선언해보고, 왜 그것이 적절하지 않은지 설명하세요.
    /*
    변수명 선언 규칙은 자바와 동일하다.
    */
//---
//### 09/29 (금요일)
//- **개념문제**: 데이터 유형의 형변환 및 변수 선언 규칙에 대한 이해.
    /*
    1. 강제 형변환
    자바 스크립트는 int 형이든 String 형이든 모든 변수를 var로 선언하는것이 가능하다.
    var num = 10;
    var str = '10'; 
    1. 문자형을 숫자형으로
        var 변수 = parseInt(문자)   // 문자 => 정수형 숫자로
        var 변수 = parseFloat(문자) // 문자 => 실수형 숫자로
        var 변수 = Number(문자) // 문자 => 정수&실수형 숫자로
        ex) var a = "25" // 문자열 "25"
            var b = Number(a)  // 숫자형 25
        주의 ) 문자열 맨 앞에 문자로 시작하면 형변환을 해도 값을 인식 못함
        ex) var a = "a25"  // 문자열 "a25"
            var b = Number(a) // 숫자형 NaN
    2. 숫자형을 문자형으로
        var 변수 = String(숫자) // 숫자 => 문자
        var 변수 = 숫자 + "문자열"  // 숫자와 문자열을 한 문자열로 더해줌
        ex) var x = 123
            var y = String(x) // 문자형 123 
    */
//- **코드연습문제**: 형변환을 요구하는 다양한 상황의 코드 작성 및 변수 선언 규칙을 따르는 코드 작성.
//사용자로부터 두 개의 정수 `a`와 `b`를 입력받아, 그 중 어느 수가 큰지 판별하고, 두 수의 합, 차, 곱, 나눗셈의 몫과 나머지를 출력하세요.
    // var a = Number(prompt("정수 a 입력",0))
    // var b = Number(prompt("정수 b 입력",0))
    // const sum = a + b
    // const diff = Math.abs(a - b)
    // const multi = a * b

    // if (a > b){
    //     console.log('a가 b보다 큼')
    // }else if(b > a){
    //     console.log('b가 a보다 큼')
    // }else {
    //     console.log('a와 b가 같음')
    // }

    // if (b !== 0){
    //     console.log(`두 수의 합 : ${sum}`)
    //     console.log(`두 수의 차 : ${diff}`)
    //     console.log(`두 수의 곱 : ${multi}`)
    //     if(a >= b){
    //         const share = Math.floor(a / b)
    //         const remain = a % b
    //         console.log(`나눗셈의 몫 : ${share}`) 
    //         console.log(`나눗셈의 나머지 : ${remain}`) 
    //     }else{
    //         const share = Math.floor(b / a)
    //         const remain = b % a
    //         console.log(`나눗셈의 몫 : ${share}`) 
    //         console.log(`나눗셈의 나머지 : ${remain}`) 
    //     }

    // }

//---
//### 09/30 (토요일)
//- **개념문제**: 자바스크립트의 연산자들에 대한 설명 및 각 연산자의 용도 이해.
    /*
        기본적으로 자바와 같음. 다만, js에는 타입이 같은지 까지 비교하는 ===, !== 가 있다.
        js에서는 자동형변환의 편의성이 있지만, 데이터 유형에 대한 check부분에 대한 필요성이 있을 때가 있다.
        "2" == 2 : true 자동형변환으로 동일한 데이터이면 true
        "2" === 2 : type부터 check하고, 데이터가 같은지 여부 check.  타입이 다르기에 false 
        2 == = 2 : 타입도 같고, 데이터도 같기에 true50
        "2" !== 2 : 타입이 다르거나 데이터가 다를 때 true
    */
//- **코드연습문제**: 주어진 문제 상황에 맞는 연산자를 사용하여 코드를 작성.
//사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
    // let num02 = Number(prompt("정수 (0,음수,양수) 입력",0));
    // if(num02>0){
    //     console.log('입력한 수는 양수입니다.')
    // }else if(num02<0){
    //     console,log('입력한 수는 음수입니다.')
    // }else if(num02===0){
    //     console.log('입력한 수는 0입니다.')
    // }else{
    //     console.log('정수를 입력하지 않았습니다.')
    // }
	
//---
//### 10/01 (일요일)
//- **개념문제**: 조건문의 개념 및 각 구문의 사용 방법에 대한 이해.
	/*
	@@ 제어문 : 프로그램의 흐름(flow)를 바꾸는 역할을 하는 문장들. 조건문과 반복문이 있다.
	   조건문 : 조건에 따라 다른 문장이 수행되도록 함. '조건식'과 '괄호{}'로 이루어져 있다.
			1. if문 : 가장 기본적인 조건문
			if(조건식){
				 조건식이 true 이면 수행될 문장.
			}else if(조건식) {
				 조건식이 true 이면 수행될 문장.
			}else {
				 위 조건식들에 해당하지 않는 나머지 모든 경우에 수행.
			}
			
			2. switch문 : 조건 경우의 수가 많아져 복잡해질 때 처리하기 좋다.
							단, 제약조건이 있기 때문에 경우의 수가 많아도 if문으로 처리해야
							될 때도 있다.
				1) 조건식을 계산한다.
				2) 조건식의 결과와 일치하는 case문으로 이동한다.
				3) 이후의 문장들을 수행한다.
				4) break문이나 switch문의 끝을 만나면 switch문 전체를 빠져나간다.
				
			switch(조건식) {
				case 값1 :
					조건식의 결과가 값1과 같을 경우 수행할 문장.
					break;
				case 값2 :
					조건식의 결과가 값2과 같을 경우 수행할 문장.
				// ...
				default :
					조건식의 결과와 일치하는 case문이 없을 때 수행할 문장.
					
			}
			
				switch문의 제약조건:
					1) switch문의 조건식 결과는 정수 또는 문자열이어야 한다.
					2) case문의 값은 정수 상수(문자포함), 문자열만 가능하며, 중복되지 않아야 한다. 
	*/
//- **코드연습문제**: 주어진 문제 상황에 맞는 if-else 문 또는 switch-case 문을 사용하여 코드를 작성.
//사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
    // 9월 30일자와 동일.
//---
//
//### 10/02 (월요일)
//- **개념문제**: 반복문의 개념 및 각 구문의 사용 방법에 대한 이해.
		/*
		@@ 반복문 : 어떤 작업이 반복적으로 수행되도록 할 때 사용. 종류로는 for문, while문, do-while문이 있다.
		1. for문 : 조건식이 참인 동안 블럭{}내의 문장들을 반복하다 거짓이 되면 반복문을 벗어난다.
			for(초기화; 조건식; 증감식) {
				// 조건식이 true인 동안 수행될 문장.
			}
		2. while문 : for문에 비해 구조가 간단하다. if문처럼 조건식과 블럭{}만으로 이루어져 있다.
					 다만, if문과 달리 while문은 조건식이 'true'인 동안, 즉 조건식이 거짓이 될 때까지 블럭{}
					 내의 문장을 반복한다.
			while (조건식) {
				// 조건식의 연산결과가 true인 동안, 반복될 문장.
			}
		3. do-while문 : 기본 구조는 while문과 같으나 조건식과 블럭{}의 순서를 바꿔놓은 것이다.
						그래서 while문과 반대로 블럭{}을 먼저 수행한 후에 조건식을 평가한다.
						while문은 조건식의 결과에 따라 블럭{}이 한번도 수행되지 않을 수도 있지만, do-while문은
						최소 한번은 수행될 것이 보장된다.
			do {
				// 조건식의 연산결과가 참일때 수행될 문장 (최소 한번은 반드시 수행됨)
			} while(조건식);
			
		 */
//- **코드연습문제**: 주어진 문제 상황에 맞는 for, while, do-while 문을 사용하여 코드를 작성.
//1부터 사용자가 입력한 수까지의 모든 정수의 합을 구하세요.
    // const lastNum = Number(prompt("1부터 N까지의 합(N값을 입력하세요.)",'N'))
    // var i = 0;
    // var tot = 0;
    // while(i <= lastNum){
    //     tot += i
    //     i++
    // }
    // alert(`1부터 ${lastNum}까지의 합 : ${tot}`)
//---
//### 10/03 (화요일)
//- **개념문제**: 자바의 데이터 처리 방식 및 객체의 개념 이해.
    /*
    @. 자바 스크립트의 데이터 처리 방식 ( '3)객체의 개념' 포함)
        1) 변수(Variables): 자바스크립트에서 데이터를 저장하고 처리하기 위해 변수를 사용한다. 
                            변수는 var, let, const 키워드를 사용하여 선언하며, 다양한 데이터 유형을 저장할 수 있다.
        2) 배열(Arrays) : 배열은 여러 데이터 항목을 순서대로 저장하기 위해 사용한다. 자바스크립트에서 배열은
                          '대괄호 [ ] '를 사용하여 생성하며, 각 항목은 인덱스를 사용하여 액세스 할 수 있다.
        3) 객체(Objects): 객체는 키-값 쌍으로 데이터를 구조화하는 데 사용된다. 
                          자바스크립트의 객체는 중괄호 {}를 사용하여 생성하며, 각 키는 해당 값을 가리킨다.      
        4) 함수(Functions): 함수는 데이터를 처리하고 원하는 결과를 반환하는 코드 블록을 정의하는 데 사용된다. 
                            자바스크립트에서 함수는 function 키워드를 사용하여 정의하며, 
                            함수의 매개변수를 통해 데이터를 입력하고 return을 사용하여 결과를 반환합니다.
        5) 제어 구조(Control Structures): 조건문(if-else, switch)과 반복문(for, while, do-while)을 사용하여 
                                          데이터 처리 흐름을 제어할 수 있다. 이를 통해 특정 조건에 따라 데이터를 처리하거나 
                                          반복 작업을 수행할 수 있다.
    */

//- **코드연습문제**: 배열과 객체를 활용하는 코드 작성 및 클래스의 구성요소에 따라 메서드와 필드를 가진 클래스 설계.
//사각형 클래스를 만들고, 넓이와 둘레를 구하는 메서드를 포함시키세요. 객체를 생성하고 해당 메서드를 호출하여 결과를 출력하세요.
        // 자바 스크립트에서의 클래스는 아직 안만들어 봐서 모르겠음.
//
</script>
</head>
<body>

</body>
</html>