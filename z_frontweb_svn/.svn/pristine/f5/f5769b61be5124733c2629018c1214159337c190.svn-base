<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
// # 주관식 연습 및 실습 10문제
// 1. `arguments` 객체는 어떤 자료형으로 출력되는가?
        // 자료형
//         - 함수에 전달된 값을 참조하는데 사용
//         - 함수의 인수의 개수와 유형을 알 수 있음
//         - 함수의 인수를 순화,합산,평균 계산하는데 사용 가능

// // 2. `arguments`의 주요 용도는 무엇인가요?
//         - 함수에 전달되는 값을 참조하여 처리

// // 3. `setInterval` 함수는 어떻게 사용되나요? 그리고 어떤 동작을 수행하는가?
//         - 일정 간격으로 특정 함수를 반복적으로 실행

// // 4. `setTimeout`과 `clearInterval`을 함께 사용하는 주된 목적은 무엇인가요?
//         -setTimeout은 일정시간이 지난 후에 실행되도록..ex)n초 뒤 영화가 시작됩니다.
//         -clearInterval은 반복되는 내용(ex.setIntercal)이 끝났을때...종료 멘트등

// // 5. `eval()` 함수의 기능은 무엇인가요?
//         문자열로 입력하여도 실행되게 해주는것
//         ex) eval("1+5") => 문자열은 1+5 가 되지만 eval 사용시 6이 됨

// // 6. `isNaN` 함수는 어떤 경우에 `true`를 반환하는가?
//         해당 함수가 숫자가 아닌 경우.. 문자열 또는 문자열과 숫자열이 같이 포함된 것도 해당(2개)
 
// 7. 매개변수의 기본값은 어떻게 설정하는가?
//         function 함수명(매개변수1=기본값, 매개변수2=기본값2, ...) {
//             함수코드
//         }
        // ex. 
        function add(num01 = 1, num02= 2) { //매개변수 = 기본값
            alert(num01+num02);             //함수코드
        }
        add();      //다만 위의 코드를 호출해야 경고창 사용 가능

// 8. `Number()` 함수와 `parseInt()`, `parseFloat()`의 차이점은 무엇인가요?
        // -Number() 모든 값을 숫자로.. 문자 포함될시 제외하고 숫자만 추출
        // -parseInt() 문자열을 숫자로 "25"-> 25.. 문자 포함될시 제외하고 숫자만 추출
        //             소수점 추출 안되고 정수 부분만
        // -parseFloat() 실수.. 소수점까지 추출 문자 포함시 제외
        // ==> Number>parseFloat>parseInt ..순으로 큼

// #객관식(4지선다) 10문제:
// 1. `arguments` 객체는? A 
//    - A. 배열
//    - B. 객체
//    - C. 문자열
//    - D. 숫자

// 2. `setInterval` 함수의 목적은? B
//    - A. 지정된 시간 후 함수를 한 번만 실행한다.
//    - B. 지정된 시간마다 함수를 반복적으로 실행한다.
//    - C. 지정된 시간 동안 함수를 일시 중단한다.
//    - D. 모든 타이머를 중지한다.

// 3. `eval` 함수의 역할은? B
//    - A. 코드를 문자열로 변환한다.
//    - B. 문자열로 된 코드를 실행한다.
//    - C. 변수의 값을 계산한다.
//    - D. 문자열을 숫자로 변환한다.

// 4. 다음 중 `isNaN` 함수가 `true`를 반환하는 것은? C,D
//  *isNaN true 조건 : 숫자가 아니여야함(NaN)
//    - A. `isNaN("100")`  "100"->자동형변환되서 100으로 인식
//    - B. `isNaN(100)`     숫자
//    - C. `isNaN("Hello")` 문자
//    - D. `isNaN(undefined)`   undefined는 값이 없음을 나타내고 이는 숫자로 나타낼수 없다

// 5. 매개변수의 기본값을 설정하는 방법은? A
//    - A. `function test(a = 10) {}`
//    - B. `function test(a: 10) {}`
//    - C. `function test(a; 10) {}`
//    - D. `function test(a) = 10 {}`

// 6. 1 나누기 0의 결과는? D
//    - A. 1
//    - B. 0
//    - C. `undefined`
//    - D. `Infinity` ==> 무한대라는 뜻으로 양수와 음수 상관없이 0으로 나누면 무한대값을 나타냄
//                          단, 0을 0으로 나누면 NaN값이 뜸 ...무의미한 연산(수학적 의미가 없는 연산이므로)

// 7. 함수를 다른 함수의 매개변수로 전달하는 기능을 무엇이라고 하는가? A
//    - A. 콜백 함수 
//    - B. 리턴 함수 
//    - C. 중첩 함수
//    - D. 순수 함수
//설명 보충 요청함

// 8. `Number("1000원")`의 결과는? B 
//    - A. `NaN`
//    - B. 1000         //Number js의 숫자의 가장 큰 범위로써 숫자열 외의것을 모두 제외하여 추출
//    - C. "1000원"
//    - D. 에러 발생

// 9. `parseInt("1.5달러")`의 결과는? B
//    - A. 1.5  //parseFloat 사용시 숫자 소수점까지 추출하고 문자열만 제외
//    - B. 1    //parseInt는 정수만 추출하기 때문에 소수점과 문자열을 제외하고 추출
//    - C. `NaN`
//    - D. 에러 발생

// 10. JavaScript에서 `arguments` 객체는 어떤 함수에서 사용 가능한가? C
//    - A. 모든 함수에서
//    - B. 화살표 함수에서만
//    - C. 전통적인 함수에서만
            // -로컬변수:특정범위에서만 접근 가능
            // function a() {
            //     var aa = 1;
            // }   ==> aa가 로컬 변수가 됨
            // -매개변수
            // function a(a,b) {
            //     var c = a+b;
            //     alert("두수의 합은" +c+"이다")
            // }
            // a(5,3); //호출해야 창 뜨고 실행됨
            // ==> a,b가 매개변수가됨
            // -전역변수
            // var aaa = 10;
            // function bb() {
            //     console.log(aaa)
            // }
            // bb();
            // =>여기서 aaa는 전역변수가 됨
//    - D. 클래스 내부 함수에서만

// # 실습문제
// 1. **arguments 객체 활용**:
//     - `arguments` 객체를 사용하여 받은 숫자의 평균값을 반환하는 함수 `average`를 작성하세요.
            function average() {
                let sum = 0;
                for (let i = 0; i < arguments.length; i++) {
                    sum += arguments[i];
                }

                // 평균값 계산
                var avg = sum / arguments.length;

                return avg;
            }

            var avInt = average(10, 20, 30);
            console.log("평균값:"+avInt);
           






// 2. **함수를 매개변수로 전달**:
//     - `call01` 함수와 같은 방식으로, 문자열을 출력하는 함수 `printMessage`를 작성하고, 이 함수를 매개변수로 받아 3번 출력하는 `repeatMessage` 함수를 작성하세요.
            // 문자열을 출력하는 함수 printMessage
            function printMessage(message) {
                console.log(message);
            }
            // 함수를 매개변수로 받아 3번 출력하는 reMessage 함수
            function reMessage(printFunction) {
                for (let i = 0; i < 3; i++) {
                    printFunction("안녕하세요!"); // 매개변수로 전달된 함수를 호출하여 메시지 출력
                }
            }
            // repeatMessage 함수 호출
            reMessage(printMessage); // printMessage 함수를 매개변수로 전달
// 3. **setInterval & setTimeout 활용**:
//     - 5초 간격으로 현재 시간을 출력하고, 총 3번 출력한 후에 타이머를 종료하는 코드를 작성하세요.
//setInterval 반복해서 호출 1. 먼저 반복호출 코드 짜준다
//setTimeout은 시간뒤 종료 2.  
            var cnt = 0; // 출력 횟수를 세는 변수

            var time = setInterval(function() {
                var date = new Date();
                document.write(`현재시간: ${date}`);
                cnt++;

                if (cnt >= 3) {
                    clearInterval(time); // 타이머를 종료
                    document.write("타이머 종료");
                }
            }, 5000); // 
            
          
// 4. **eval 함수 활용**:
//     - `eval` 함수를 사용하여 "5+7" 이라는 문자열의 연산 결과를 출력하는 코드를 작성하세요.
            var num03 = ("25+3")
            alert(eval(num03))

// 5. **숫자 에러 체크**:
//     - "Hello"라는 문자열을 숫자로 변환하려고 할 때 발생하는 에러를 확인하고, `isNaN` 함수로 이 에러를 체크하는 코드를 작성하세요.
            //
            var hello = isNaN("Hello");
            var number = isNaN("11");
            console.log(hello)
            //F12시 ture값이 나옴
            console.log(number)
            //F12시 false값이 나옴
// 6. **기본 매개변수 활용**:
//     - 세 개의 매개변수 a, b, c의 곱을 반환하는 함수를 작성하세요. b와 c는 기본값이 각각 3, 5로 설정되어 있어야 합니다.
            function a(a, b = 3, c = 5) { // 함수 이름을 'a'로 변경
                return a * b * c;
            }

            const num = a(1);
            console.log(num);
// 7. **문자열에서 숫자 추출**:
//     - "35km"와 "10m"에서 숫자만 추출하여 더한 결과를 출력하는 코드를 작성하세요.
            var str35 = "35km";
            var str10 = "15m";

            // parseInt를 사용하여 숫자만 추출
            var number = parseInt(str35);
            var number2 = parseInt(str10);

            // 결과 출력
            console.log(number); 
            console.log(number2); 
// 8. **prompt를 활용한 입력과 형변환**:
//     - 사용자에게 "3.2kg"와 같이 kg 단위로 무게를 입력받고, 두 입력 값을 합산하여 출력하는 코드를 작성하세요.
            var kg1 = parseFloat(prompt("첫번째 @.@kg 단위를 입력하세요"))
            var kg2 = parseFloat(prompt("두번째 @.@kg 단위를 입력하세요"))
            
            var kgTot = kg1+kg2
            alert(kg1+"kg + " +kg2+ "kg = " +kgTot+"kg")

// 9. **함수 호출 시 값 전달**:
//     - 위에서 정의한 `test` 함수를 호출하되, a만 값을 전달하여 b와 c의 기본값과 함께 출력되게 하세요.
            const aVal = 50; // a에 전달할 값
            const result = a(aVal); // a만 값을 전달하고 나머지는 기본값을 사용

            console.log(`a: ${aVal}
                         b: 
                         c:
                         결과: ${result}
                         `);

// 10. **문자열 내 숫자 추출 및 연산**:
//     - "120$"와 "100$"에서 각각의 숫자만 추출하여 더한 후 결과를 출력하는 코드를 작성하세요.
            var dollar1 = "120$";
            var dollar2 = "100$";

            // 숫자만 추출하여 더하기
            var num1 = parseFloat(dollar1);
            var num2 = parseFloat(dollar2);
            var sum = num1 + num2;

            console.log(`${num1}$+${num2}$=${sum}$`);



    </script>
</body>
</html>