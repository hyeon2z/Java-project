package javaexp.z02_homework.a21_hcj;

public class A0928_1004 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		- **개념문제**: 자바의 메모리 분류 및 기본 데이터 유형에 대한 설명.
//		stack 	영역: 기본데이터에 해당되는 지역변수,매개변수 데이터값이 저장되는 메모리공간
//						heap 역역에 생성된 객체가 가리키는 값이 stack영역에 저장된다.
//		heap	영역: 객체가 저장되는 메모리공간
			
//		정수형 데이터타입 int, long, byte
//		문자형 데이터타입 char, 문자열 데이터타입 String
//		실수형 데이터타입 double, float
//		논리형 데이터타입 boolean
		
		
//		### 09/29 (금요일)
//		- **개념문제**: 데이터 유형의 형변환 및 변수 선언 규칙에 대한 이해.
		// 자동 데이터 형변환
		//	작은 크키의데이터에서 큰크기로의 데이터변환은 따로 아무것도 해주지않아도 자동으로
		//	변환되어 들어간다.	
		//	큰크기의 데이터에서 작은크기의 데이터로의 변환은 데이터 손실이 발생할수있어 자동으로
		//	변환이 되지않고 명시적으로 강제캐스팅을 해주어야 형변환이 된다
		// 변수선언규칙
		// 1. 숫자로시작되면 안된다.
		// 2. 특수문자는 _와$만 허용한다.
		// 3. 공백이포함되면 안된다,
		// 4.예약어를 사용하면 안된다.
		// 5. 대소문자가 구문되며 길이의 데한이없다.
		// 6. 첫글자를제외한 단어의 시작은 대문자로 한다.
		
		
//		- **코드연습문제**: 형변환을 요구하는 다양한 상황의 코드 작성 및 변수 선언 규칙을 따르는 코드 작성.
//		사용자로부터 두 개의 정수 `a`와 `b`를 입력받아, 그 중 어느 수가 큰지 판별하고, 두 수의 합, 차, 곱, 나눗셈의 몫과 나머지를 출력하세요.
		
		double num1 = 3.0;
		int num2 = 5;
		int sum = (int)num1 + num2;
//		--------------------------
		int a = 5;
		int b = 2;
		
		int max;
		
		if(a>b)System.out.println(a+"가 더 큽니다");
		else if(a==b)System.out.println(a+" 와 "+b+"는 같습니다");
		else System.out.println(b+"가 더 큽니다");
		
		System.out.println(a+" + "+b+" = "+ (a+b));
		System.out.println(a+" - "+b+" = "+ (a-b));
		System.out.println(a+" * "+b+" = "+ a*b);
		System.out.println(a+" / "+b+" = "+ a/b);
		System.out.println(a+" % "+b+" = "+ a%b);
		
//		### 09/30 (토요일)
//		- **개념문제**: 자바의 연산자들에 대한 설명 및 각 연산자의 용도 이해.
		// 대입 연산자 : 오른쪽에있는 데이터값을 왼쪽에 대입해주는 연산자.
		// 산술 연산자 : +,-,/,* 과같은 수학전 연산을 해주는 연산자.
		// 복합 대입 연산자 : +=,-=,*= 과같은 형태로 왼쪽이 가지고있는 현재 
		//	데이터값 과 오른쪽에있는 데이터를 산술해서 그값을 왼쪽 데이터에 대입하는 연산자.
		// 증갑연산자 : 변수의 값을 1씩 증가하거나 감소시키는연산자
		//			1) 변수++ 출력후 증가
		//			2) ++변수 증가후 출력
		//			3) 변수-- 출력후 감소
		//			4) --변수 감소후 출력
		// 관계 연산자 : 왼쪽의 데이터와 오른쪽을 데이터를 비교해서 결론을 true 또는 false
		//		값으로 도출해주는 연산자
		// 삼항 연산자 : (조건식)?(결과1):(결과2)의 형태로 조건식을 연산해서 true 일때는
		//			결과1이 실행되고 false 일때는 결과2가 실행된다
		// 논리 연산자 
		//		1. (조건1)||(조건2) 연산자(or)
		//			조건1 과 조건 2 중 1개라도 true면 true 둘다 false면 false
		//		2. (조건1)&&(조건2) 연산자(and)
		//			조건1 과 조건2 둘가 true 여야 true 하나라도 false면 false
//		- **코드연습문제**: 주어진 문제 상황에 맞는 연산자를 사용하여 코드를 작성.
//		사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
		int no = -1 ;
		
		System.out.println(no>0?"양수":no==0?"0":"음수");
		
		
		
//		### 10/01 (일요일)
//		- **개념문제**: 조건문의 개념 및 각 구문의 사용 방법에 대한 이해.
//		 조건문 : 조건식이 true일때만 {}블럭내의 코드가 실행되는 개념이다.
//		if : if(조건식){} 의 형태로 조건식이 true일때만 {}블럭이 실행된다.
//		if-else : if(조건식){} else{}형태로 조건식이 true일때는 if쪽 {}블럭 실행 
//			false일때는 else 쪽{}블럭 실행
//		if-else if-else :if(조건식1){}else if(조건식2){} else{} 형태
//		조건식1이 true일경우 if쪽 {}블럭 실행 
//		false일 경우 조건식2 비교 true면 elseif쪽{}블럭 실행 false일경우	
//		else {}블럭 실행
//		switch-case: switch(데이터){case 조건:}
//		(데이터)의 값이 조건에 일치할경우 해당행포함 아래로 쭉 실행
//		- **코드연습문제**: 주어진 문제 상황에 맞는 if-else 문 또는 switch-case 문을 사용하여 코드를 작성.
//		사용자로부터 정수를 하나 입력받아, 그 수가 양수인지, 음수인지, 또는 0인지 판별하세요.
		int no2 = 4;
		if(no2 > 0)System.out.println("양수");
		else if (no2 == 0)System.out.println("0");
		else System.out.println("음수");
		
		
//		### 10/02 (월요일)
//		- **개념문제**: 반복문의 개념 및 각 구문의 사용 방법에 대한 이해.
//		반복문 내의 조건과 일치할경우 계속 수행해서 조건에 일치하지 않을떄까지 반복하는것을
//		반복문이라 한다,  for문, while문, do-while문이 있다
//		for(초기값;조건식;증감식){}
//			초기값을 설정후 해당 조건이 참이면 {}블럭 실행후 증감식 연산을 하고 다시 조건비교에 들어가
//			조건식에 맞지않을떼까지 해당순서를 반복한다.
//		while(조건식){}
//		조건식이 true일경우 반복실행해서 false가 될때까지 반복한다
//		do{}while(조건식);
//		우선 처음한번 do{}블럭내의 코드를 실행하고 그후 조건식을 비교 하여 
//		true일경우 다시 {}블럭내의 코드를 실행하며 조건식 false가 될때까지 
//		반복 실행
		
//		- **코드연습문제**: 주어진 문제 상황에 맞는 for, while, do-while 문을 사용하여 코드를 작성.
//		1부터 사용자가 입력한 수까지의 모든 정수의 합을 구하세요.
//		---
		
		int end = 10;
		int tot = 0;
		for(int i = 1; i<=end;i++) {
			tot +=i;
		}
		System.out.println("1부터 "+end+ "까지의 모든 수의 합은 "+tot);
		
		
//		### 10/03 (화요일)
//		- **개념문제**: 자바의 데이터 처리 방식 및 객체의 개념 이해.
//		객체란 일종의 설계도같은 개념으로 도면을 설계해두고 필요할때 만들어서 쓰는 개념이다
//		- **코드연습문제**: 배열과 객체를 활용하는 코드 작성 및 클래스의 구성요소에 따라 메서드와 필드를 가진 클래스 설계.
//		사각형 클래스를 만들고, 넓이와 둘레를 구하는 메서드를 포함시키세요. 객체를 생성하고 해당 메서드를 호출하여 결과를 출력하세요.
		
		
		Square squ = new Square(4,5);
		
		System.out.println("사각형 넓이:"+squ.getArea());
		System.out.println("사각형 둘레:"+squ.getRound());
	}

}

class Square{
	private int width;
	private int height;
	
	public Square(int width, int height) {
		this.width = width;
		this.height = height;
	}
	
	public int getArea() {
		return width*height;
	}
	public int getRound() {
		
		return (width*2)+(height*2);
	}
	
}