### 1. 흥미로운 도입
"대부분의 사람들은 쇼핑을 좋아합니다. 상상해보세요, 여러분이 식료품 가게에 
갔다고 생각해봅시다. 장바구니에 여러 아이템을 넣습니다. 그런데, 바구니에는
한계가 있습니다. 이 바구니는 여러분의 Java '배열'과 같습니다. 
한 번에 여러 아이템을 보관하지만, 한계가 있는 것입니다. 
오늘 여러분은 Java의 '배열' 바구니에 무엇을 담을 수 있는지, 
그리고 어떻게 그 안의 아이템을 관리하는지 배울 것입니다!"
### 2. 학습목표
- Java에서 배열의 정의와 용도를 이해한다.
- 배열을 선언, 초기화, 접근하는 방법을 학습한다.
- 다양한 예제를 통해 배열의 실용적인 사용법을 알아본다.
- 배열의 한계와 주의점을 이해한다.
### 3. 간단한 퀴즈
1. 배열은 변수와 어떻게 다른가요?
   - A. 배열은 단일 값만 저장할 수 있다.
   - B. 배열은 여러 값을 순차적으로 저장할 수 있다.
   - C. 배열은 값을 저장할 수 없다.
   - D. 배열은 항상 문자열만 저장할 수 있다.
2. 다음 중 배열을 올바르게 초기화한 것은 무엇인가요?
   - A. `int arr = {1, 2, 3, 4, 5};`
   - B. `int[] arr = (1, 2, 3, 4, 5);`
   - C. `int[] arr = [1, 2, 3, 4, 5];`
   - D. `int arr[] = {1, 2, 3, 4, 5};`
3. 배열 `int[] numbers = {10, 20, 30, 40, 50};`에서 `30`에 접근하려면 어떻게 해야 하나요?
   - A. `numbers[2];`
   - B. `numbers[3];`
   - C. `numbers[30];`
   - D. `numbers[1];`
### 4. 주요 핵심 키워드와 개념
- **배열 (Array)**: 같은 타입의 여러 변수를 하나의 이름으로 그룹화하여 
				관리하는 데이터 구조.
- **인덱스 (Index)**: 배열의 각 요소에 접근하기 위한 위치 번호. 
				0부터 시작한다.
- **선언 및 초기화**: 배열을 생성하고 값으로 초기화하는 방법.
- **배열의 길이**: 배열에 저장할 수 있는 요소의 개수. `length` 
				속성으로 확인할 수 있다.
- **다차원 배열**: 배열의 배열. 행렬과 같은 구조로 데이터를 저장하고 
				관리할 수 있다.
- **배열의 한계**: 한번 생성된 배열의 크기는 변경할 수 없다. 
````````````크기를 늘리려면 새로운 배열을 생성해야 한다.





