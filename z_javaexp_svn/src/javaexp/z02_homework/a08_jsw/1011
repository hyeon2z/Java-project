package Today20231010;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Today20231010
{
	public static void main(String args[])
	{	
//		[1단계:개념] 1. this, super 생성자를 구분해서 사용하는 이유를 간단한 예시를 통해서 설명해보자.
		/*
		this 생성자는 한 클래스의 생성자에서 같은 클래스의 다른 생성자를 호출하기 위해 사용한다.
		super 생성자는 자식 클래스의 생성자에서 부모 클래스의 생성자를 호출하기 위해 사용한다.
		
		class Parents
		{
			String surname;
			String house;
			
			public Parents(String surname)
			{
				this.surname=surname;
			}
			public Parents(String surname, String house)
			{
				this(surname);
				this.house = house;
			}
		}
		class Children extends Parents
		{
			int age;
			int grade;
			public Children(String surname, String house, int age, int grade)
			{
				super(surname,house);
				this.age = age;
				this.grade = grade;
			}
			
		}
		*/
//		[1단계:개념] 2. 오버라이딩이란 무엇인가? 개념을 기본예제와 함께 설명하세요
		/*
		부모클래스의 메소드를 자식클래스의 메소드에서 재정의하는것. (해당 메소드의 시그니처는 변함없어야한다)
		class Parents
		{
			void say()
			{
				System.out.println("나는 부모");
			}
		}
		class Children
		{
			void say()
			{
				System.out.println("나는 자식");
			}
		}
		*/
//		[1단계:개념] 3. 오버라이딩과 오버로딩의 차이점을 기술하세요.
		/*
		 오버라이딩은 기존 메소드를 재정의한다.
		 오버로딩은 새로운 메소드를 정의한다.
		*/
//		[1단계:확인] 4. 아래 오버라이딩 연습예제를 만드세요
//			1) 동물의 소리 내기:Animal 클래스에는 sound()라는 메서드가 있어 동물의 소리를 출력합니다. Dog와 Cat 클래스는 Animal을 상속받습니다. 두 하위 클래스에서 sound() 메서드를 오버라이드하여 각 동물의 소리를 출력하세요.
//			2) 도형의 면적 계산: Shape 클래스는 area() 메서드를 가지며, 이는 면적을 출력합니다. Circle과 Rectangle 클래스는 Shape을 상속받습니다. 두 하위 클래스에서 area() 메서드를 오버라이드하여 각 도형의 면적을 계산하세요.
//			3) Calculator 클래스에는 operation() 메서드가 있어 연산 결과를 출력합니다. Adder와 Subtractor 클래스는 Calculator를 상속받습니다. 두 하위 클래스에서 operation() 메서드를 오버라이드하여 각 연산의 결과를 출력하세요.
		/*
		class Animal
		{
			void sound()
			{
				System.out.println("동물의 울음소리");
			}
		}
		class Dog extends Animal
		{
			void sound()
			{
				System.out.println("개의 울음소리");
			}
		}
		class Cat extends Animal
		{
			void sound()
			{
				System.out.println("고양이의 울음소리");
			}
		}
		
		
		class Shape
		{
			void area()
			{
				System.out.println("도형의 면적");
			}
		}
		class Circle extends Shape
		{
			double r;
			void area()
			{	
				System.out.println("원의 면적 : "+(3.14*r*r));
			}
		}
		class Rectangle extends Shape
		{
			double x;
			double y;
			void area()
			{
				System.out.println("사각형의 면적 : "+(x*y));
			}
		}
		
		class Calculator
		{
			double x;
			double y;
			void operation()
			{
				System.out.println("계산을 합시다.");
			}
		}
		class Adder extends Calculator
		{
			void operation()
			{
				System.out.println("덧셈 : "+(x+y));
			}
			
		}
		class Subtractor extends Calculator
		{
			void operation()
			{
				System.out.println("뺄셈 : "+(x-y));
			}
		}
		*/
//		[1단계:확인] 5. 접근제어자에 대하여 기본 예제와 함께 접근 범위를 기술하세요.
//			1) 아래 구조에 의해 접근제어자에 따른 호출 내용을 처리해 보자.
//		         패키지1 : 참외, 사과, 멜론(참외상속), 바나나, 딸기
//		         패키지2 : 당근, 양파
//		         패키지3 : 수박(참외상속)
//		         패키지1의 참외에 접근제어자 4가지와 호출하는 메서드를 정의하고 각 클래스에서 호출해보세요.
		/*
			접근제어자와 범위
			1.private : 필드 생성자 메서드 : 모든 외부 클래스에서 접근할 수 없다. 내부 클래스에서만 사용 가능
			2.default : 클래스 필드 생성자 메서드 : 다른 패키지에 소속된 클래스에서는 호출할 수 없다. 같은 패키지에 있는 클래스들끼리 호출
			3.protected : 필드 생성자 메서드 : 자식 클래스가 아닌 다른 패키지에 소속된 클래스는 접근 불가능하다. 외부패키지라도 상속관계가 있으면 접근 가능하다.
			4.public : 클래스 필드 생성자 메서드 : 외부 패키지라도 import만 하면 접근하여 사용할 수 있다. import하지 않아도 패키지명.클래스명 선언 형식으로 처리하면 사용할 수 있다.
			
			패키지1의 참외에 접근제어자 4가지(public String a, protected String b, default String c, private String d)와 호출하는 메서드를 정의하고 각 클래스에서 호출해보세요.
			class 참외
			{
				public String a="public";
				protected String b="protected";
				default String c="default";
				private String d="private";
			}
			일때 System.out.println() 을 이용하여 타 클래스에서 호출해보자.
			
			사과-참외와 같은 패키지에 있고 상속관계는 아니다. 그러므로 a, b, c에 접근 가능하다.
			멜론-참외와 같은 패키지에 있고 상속관계는 맞다. 그러므로 a, b, c에 접근 가능하다.
			바나나-참외와 같은 패키지에 있고 상속관계는 아니다. 그러므로 a, b, c에 접근 가능하다.
			딸기-참외와 같은 패키지에 있고 상속관계는 아니다. 그러므로 a, b, c에 접근 가능하다.
			당근-참외와 다른 패키지에 있고 상속관계는 아니다. 그러므로 a에 접근 가능하다.
			양파-참외와 다른 패키지에 있고 상속관계는 아니다.그러므로 a에 접근 가능하다.
			수박-참외와 다른 패키지에 있고 상속관계는 맞다. 그러므로 a, b에 접근 가능하다.
			
		*/
		
		
		
		
		
		
//		[1단계:개념] 6. 다형성이란 무엇인가? 간단한 기본예제를 통해서 설명하세요.
		/*
		 부모클래스의 참조변수에 자식클래스 인스턴스를 할당하는것이다.
		 Parents p=new Children(); // 금일 과제에 존재하는 Parents클래스와 Children클래스 존재한다고 가정
		*/
//		[1단계:확인] 7. 아래와 같은 추상 클래스를 만드세요.
//				음식 추상 클래스:
//				Food라는 추상 클래스를 생성하세요.
//				consume라는 추상 메소드를 추가하세요. 이 메소드는 음식을 먹는 행동을 나타내며, "음식이름이 소비되었습니다."와 같은 메시지를 출력하도록 합니다.
//				이 추상 클래스를 상속받아 Pizza, Salad, Burger 클래스를 구현하세요. 각 클래스는 필요한 필드와 생성자, 그리고 consume 메소드를 오버라이드하여 구현하세요.
		/*
		abstract class Food
		{
			int toppings; // 각 음식마다 몇가지 종류의 토핑을 추가할것입니까?
			Food()
			{
				
			}
			Food(int toppings)
			{
				this.toppings=toppings;
			}
			abstract void consume();
		}

		class Pizza extends Food
		{
			int pieces; // 몇 조각으로 나눌것입니까?
			
			Pizza()
			{
				super();
			}
			Pizza(int pieces)
			{
				super();
				this.pieces=pieces;
			}
			Pizza(int toppings,int pieces)
			{
				super(toppings);
				this.pieces=pieces;
			}
			
			void consume()
			{
				System.out.println(toppings+" 개의 토핑이 들어가고 조각이 "+this.pieces+" 인 피자가 소비되었습니다.");
			}
		}

		class Salad extends Food
		{
			float weight; // 무게 얼마나 나갑니까?
			
			Salad()
			{
				super();
			}
			Salad(int weight)
			{
				super();
				this.weight=weight;
			}
			Salad(int toppings,int weight)
			{
				super(toppings);
				this.weight=weight;
			}
			
			void consume()
			{
				System.out.println(toppings+" 개의 토핑이 들어가고 무게가 "+this.weight+" 인 샐러드가 소비되었습니다.");
			}
		}

		class Burger extends Food
		{
			String name; // 햄버거이름

			Burger()
			{
				super();
			}
			Burger(String name)
			{
				super();
				this.name=name;
			}
			Burger(int toppings,String name)
			{
				super(toppings);
				this.name=name;
			}
			
			void consume()
			{
				System.out.println(toppings+" 개의 토핑이 들어간 " +this.name+" 버거가 소비되었습니다.");
			}
		}
		*/
	}//main
}//class


