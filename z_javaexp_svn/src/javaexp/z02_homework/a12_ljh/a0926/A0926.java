package javaexp.z02_homework.a12_ljh.a0926;

public class A0926 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		# 아래 내용을 java 문제로  개념 정리하고 내용 확인해주세요
//
//		[개념] 1. 배열의 선언과 할당 기본형식의 종류를 예제를 통해 기술하세요
//				1) 배열 선언
					String strArry[];
//				2) 배열 할당
					strArry = new String[3];
//				3) 배열 선언과 할당
					int intArry[] = {1, 2, 3};
					
//		[개념] 2. 배열의 기본 속성들을 기술하세요.
//				1) 배열의 type
//					배열은 동일한 데이터 유형의 요소들을 저장한다. 
//					예를 들어, 정수 배열은 정수 값들의 집합을 저장하며, 문자열 배열은 문자열들의 집합을 저장한다.
//				2) 배열의 길이
//					배열의 길이는 배열에 포함된 요소의 수를 나타낸다. 
//					길이는 배열을 생성할 때 지정하며, 생성 이후에 변경할 수 없다. 
//					길이는 0 이상이어야 한다.
					
//				3) 배열의 index
//					배열의 각 요소는 0부터 시작하는 인덱스로 식별된다. 
//					첫 번째 요소의 인덱스는 0이며, 두 번째 요소의 인덱스는 1이고, 이런 식으로 계속된다. 
//					마지막 요소의 인덱스는 배열의 길이보다 1 작다.
					
//					ex) int intArry[index];
					
//				4) 배열 선언 및 할당, 초기화
//					배열 선언 : String [] exArry;
//					배열 할당 : exArry = new String[5];
//					배열 초기화: exArry[0] = "철수";
//					한번에 하기: int exArry2[] = {10, 20, 30, 40, 50};
					
				
//		[확인] 3. Math.random()으로 주사위 5회 던진 결과를 배열에 할당 처리하고 출력하세요.
				int dice[] = new int[5];
				System.out.println("# 3. 주사위 던지기 #");
				for(int idx=0; idx<dice.length; idx++) {
					dice[idx] = (int)(Math.random()*6+1);
					
					System.out.println(idx+1 + "회 결과: " + dice[idx]);
				}
				
				System.out.println();
				
//		[개념] 4. 배열과 반복문의 관계를 각 속성과 예제를 통해서 설명하세요.
//				배열은 순차적인 index에 해당하는 데이터를 할당하여 출력 및 활용한다.
//				이는 반복문(for문)을 활용하여 효율적으로 배열을 활용할 수 있다.
//				ex)
//				int exArry[] = new int[10];
//				for(int idx=0; idx<exArry.length;idx++){
//					exArry[idx] = (int)(Math.random()*100+1);
//				}
//				이와 같이 배열의 인덱스와 길이를 반복문을 통해 보다 쉽게 설정하여 데이터를 해당 배열에 할당 및 활용할 수 있다.
				
//		[확인] 5. 학생 30명의 점수를 배열로 초기로 일단, 선언하고, for문을 통해서 임의의 점수(0~100)까지 할당해 보세요.
				int pts[] = new int[30];
				System.out.println("# 5. 학생 30명 점수 #");
				for(int idx=0; idx<pts.length; idx++) {
					pts[idx] = (int)(Math.random()*100+1);
					System.out.println(idx+1 + "번 학생 성적: " + pts[idx]);
				}
				
				
//		[토론] 6. for문과 배열과의 관계에서 기본형식과 foreach문의 장단점과 사용하는 각각 적절한 활용 시점 토의해 보자.
//				배열의 index는 순차적인 구조이며 각각의 index에 해당하는 배열에 데이터를 할당해야한다.
//				일일이 데이터를 할당하기 보다 for문을 활용하면, 더욱 간편하게 데이터를 할당 및 출력할 수 있는 장점이 있다.
//				배열은 순차적인 같은 데이터 타입을 모아놓은 것이므로 index도 0부터 순차적으로 증가하기때문에 for문과 같이 쓰면 index를 for문의 요소로 접근하면 편리하게 배열을 활용할 수 있다.
				
//				for문 구조
//		         for(int idx=0;idx<배열.length;idx++){
//		       		배열[idx]
//			     }
//		      장점 : 반복 횟수가 정해져있는 경우, for문을 사용하면 가독성이 좋다
//		                        초기화, 조건식, 증감식을 이용하여 반복문의 흐름을 직관적으로 파악할 수 있다.
//		      단점 : 인덱스를 이용해서 요소에 접근하기 때문에 코드가 복잡해 질 수 있다.
//		            인덱스를 사용하기 때문에 인덱스 오류가 발생할 가능성이 있다.
		      
//		      foreach문 구조
//		      for(단위데이터 변수:배열)
//		      장점 : 인덱스를 사용하지 않기 때문에 코드가 간결해진다.
//		            인덱스를 사용하지 않기 때문에 인덱스 오류가 발생할 가능성이 적다.
//					인덱스를 사용하지 않고 순차적으로 데이터에 접근하기 때문에 일반 for문보다 데이터 처리 속도가 빠르다.
//		      단점 : 반복 횟수가 정해져 있지 않은 경우 사용 할 수 없다.
//		            인덱스를 사용하지 않기 때문에 요소의 인덱스를 알아내기 어렵다.

	}

}
